   1               		.file	"time.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 115               		.section	.text.TimeInit,"ax",@progbits
 117               	.global	TimeInit
 119               	TimeInit:
   1:time.c        **** /*
   2:time.c        **** Copyright (C) Trampas Stern  name of author
   3:time.c        **** 
   4:time.c        **** This program is free software; you can redistribute it and/or
   5:time.c        **** modify it under the terms of the GNU General Public License
   6:time.c        **** as published by the Free Software Foundation; either version 2
   7:time.c        **** of the License, or (at your option) any later version.
   8:time.c        **** 
   9:time.c        **** This program is distributed in the hope that it will be useful,
  10:time.c        **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:time.c        **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:time.c        **** GNU General Public License for more details.
  13:time.c        **** 
  14:time.c        **** You should have received a copy of the GNU General Public License
  15:time.c        **** along with this program; if not, write to the Free Software
  16:time.c        **** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  17:time.c        **** */
  18:time.c        **** 
  19:time.c        **** /*******************************************************************
  20:time.c        ****  *
  21:time.c        ****  *  DESCRIPTION:
  22:time.c        ****  *
  23:time.c        ****  *  AUTHOR : Trampas Stern 
  24:time.c        ****  *
  25:time.c        ****  *  DATE : 5/12/2005  9:48:19 AM
  26:time.c        ****  *
  27:time.c        ****  *  FILENAME: time.c
  28:time.c        ****  *	
  29:time.c        ****  *         Copyright 2004 (c) by Trampas Stern
  30:time.c        ****  *******************************************************************/
  31:time.c        **** #include "time.h"
  32:time.c        **** //#include "lcd.h"
  33:time.c        **** 
  34:time.c        **** 
  35:time.c        **** UINT32 volatile Seconds=0;
  36:time.c        **** UINT16 volatile MilliSeconds=0;
  37:time.c        **** UWORD volatile cnt_timer=0;
  38:time.c        **** 
  39:time.c        **** //static FILE usart_out = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);
  40:time.c        **** //static FILE lcd_out = FDEV_SETUP_STREAM(lcd_chr_printf, NULL, _FDEV_SETUP_WRITE);
  41:time.c        **** 
  42:time.c        **** 
  43:time.c        **** /*******************************************************************
  44:time.c        ****  *  FUNCTION: TimeInit
  45:time.c        ****  *  AUTHOR 		= 	TRAMPAS STERN
  46:time.c        ****  *  FILE 		=	time.c	
  47:time.c        ****  *  DATE		=   5/12/2005  9:48:35 AM
  48:time.c        ****  *
  49:time.c        ****  *  PARAMETERS: 	
  50:time.c        ****  *
  51:time.c        ****  *  DESCRIPTION: Sets up the ISR for the timer 
  52:time.c        ****  *
  53:time.c        ****  *  RETURNS: 
  54:time.c        ****  *
  55:time.c        ****  *               Copyright 2004 (c) by Trampas Stern
  56:time.c        ****  *******************************************************************/
  57:time.c        **** UINT8 TimeInit(void)
  58:time.c        **** {
 120               	0:
 121               	.LFBB1:
 122               	/* prologue: function */
 123               	/* frame size = 0 */
  59:time.c        **** 	UINT8 count;
  60:time.c        **** 
  61:time.c        **** 	//we need to calculate the count value
  62:time.c        **** 	count=(UINT8)((FCLK_IO/TIMER_PRESCALE)/(1.0/(.001*TIMER_MILLISEC)));
  63:time.c        **** 
  64:time.c        **** #if  TIMER_PRESCALE==1
  65:time.c        **** 	TCCR0B=0x01;
  66:time.c        **** #endif 
  67:time.c        **** #if  TIMER_PRESCALE==8
  68:time.c        **** 	TCCR0B=0x02;
  69:time.c        **** #endif 
  70:time.c        **** #if  TIMER_PRESCALE==64
  71:time.c        **** 	TCCR0B=0x03;
  72:time.c        **** #endif 
  73:time.c        **** #if  TIMER_PRESCALE==256
  74:time.c        **** 	TCCR0B=0x04;
 125               	
 126               		ldi r24,lo8(4)
 127 0000 84E0      		out 69-32,r24
  75:time.c        **** #endif 
  76:time.c        **** #if  TIMER_PRESCALE==1024
  77:time.c        **** 	TCCR0B=0x05;
  78:time.c        **** #endif
  79:time.c        **** 	TCCR0A=TCCR0A |= 0x80; //enable Clear Timer on Compare
 129               	2:
 130               		in r24,68-32
 131 0004 84B5      		ori r24,lo8(-128)
 132 0006 8068      		out 68-32,r24
 133 0008 84BD      		in r24,68-32
 134 000a 84B5      		out 68-32,r24
  80:time.c        **** 	OCR0A=count; //set count 
 136               	ldi r24,lo8(46)
 137               		out 71-32,r24
 139 0010 87BD      	.LM4:
  81:time.c        **** 	TIMSK0=0x02; //enable ISR on compare match. 
 140               	 r24,lo8(2)
 141               		sts 110,r24
 143 0014 8093 6E00 	.LM5:
  82:time.c        **** 	TCNT0 =0x00;
 144               	 70-32,__zero_reg__
 146 0018 16BC      	.LM6:
  83:time.c        **** 
  84:time.c        ****     return NO_ERROR;
  85:time.c        **** }
 147               	i r24,lo8(0)
 148               	/* epilogue start */
 149 001a 80E0      		ret
 151 001c 0895      	.Lscope1:
 152               		.section	.text.__vector_16,"ax",@progbits
 154               	.global	__vector_16
 156               	__vector_16:
 158               	.LM7:
  86:time.c        **** /*******************************************************************
  87:time.c        ****  *  FUNCTION: TimerISR
  88:time.c        ****  *  AUTHOR 		= 	TRAMPAS STERN
  89:time.c        ****  *  FILE 		=	time.c	
  90:time.c        ****  *  DATE		=   5/12/2005  10:14:45 AM
  91:time.c        ****  *
  92:time.c        ****  *  PARAMETERS: 	
  93:time.c        ****  *
  94:time.c        ****  *  DESCRIPTION:  This ISR is executed when timer0 overflows
  95:time.c        ****  *
  96:time.c        ****  *  RETURNS: 
  97:time.c        ****  *
  98:time.c        ****  *               Copyright 2004 (c) by Trampas Stern
  99:time.c        ****  *******************************************************************/
 100:time.c        **** ISR (TIMER0_COMPA_vect)
 101:time.c        **** {
 159               	h __zero_reg__
 160               		push r0
 161               		in r0,__SREG__
 162 0000 1F92      		push r0
 163 0002 0F92      		clr __zero_reg__
 164 0004 0FB6      		push r18
 165 0006 0F92      		push r24
 166 0008 1124      		push r25
 167 000a 2F93      		push r26
 168 000c 8F93      		push r27
 169 000e 9F93      	/* prologue: Signal */
 170 0010 AF93      	/* frame size = 0 */
 172               	.LM8:
 173               		out 70-32,__zero_reg__
 102:time.c        **** 	TCNT0 = 0x00;
 174               	3,.LM9-.LFBB2
 175               	.LM9:
 176 0014 16BC      		lds r24,MilliSeconds
 103:time.c        **** 	MilliSeconds+=TIMER_MILLISEC;
 177               	s r25,(MilliSeconds)+1
 178               		adiw r24,1
 179 0016 8091 0000 		sts (MilliSeconds)+1,r25
 180 001a 9091 0000 		sts MilliSeconds,r24
 182 0020 9093 0000 	.LM10:
 183 0024 8093 0000 		lds r24,MilliSeconds
 104:time.c        **** 	if (MilliSeconds>=1000)
 184               	5,(MilliSeconds)+1
 185               		subi r24,lo8(1000)
 186 0028 8091 0000 		sbci r25,hi8(1000)
 187 002c 9091 0000 		brlo .L5
 189 0032 9340      	.LM11:
 190 0034 00F0      		lds r24,Seconds
 105:time.c        **** 	{
 106:time.c        **** 		//fprintf_P(&usart_out,PSTR("here at %lu  \n\r"), Seconds);
 107:time.c        **** 		Seconds++;
 191               	5,(Seconds)+1
 192               		lds r26,(Seconds)+2
 193 0036 8091 0000 		lds r27,(Seconds)+3
 194 003a 9091 0000 		adiw r24,1
 195 003e A091 0000 		adc r26,__zero_reg__
 196 0042 B091 0000 		adc r27,__zero_reg__
 197 0046 0196      		sts Seconds,r24
 198 0048 A11D      		sts (Seconds)+1,r25
 199 004a B11D      		sts (Seconds)+2,r26
 200 004c 8093 0000 		sts (Seconds)+3,r27
 202 0054 A093 0000 	.LM12:
 203 0058 B093 0000 		lds r24,cnt_timer
 108:time.c        **** 		cnt_timer++;
 204               	_timer)+1
 205               		adiw r24,1
 206 005c 8091 0000 		sts (cnt_timer)+1,r25
 207 0060 9091 0000 		sts cnt_timer,r24
 209 0066 9093 0000 	.LM13:
 210 006a 8093 0000 		sts (MilliSeconds)+1,__zero_reg__
 109:time.c        **** 		MilliSeconds=0;
 211               	lliSeconds,__zero_reg__
 212               	.L5:
 213 006e 1092 0000 	/* epilogue start */
 215               	.LM14:
 216               		pop r27
 110:time.c        **** 	}
 111:time.c        **** }
 217               	26
 218               		pop r25
 219 0076 BF91      		pop r24
 220 0078 AF91      		pop r18
 221 007a 9F91      		pop r0
 222 007c 8F91      		out __SREG__,r0
 223 007e 2F91      		pop r0
 224 0080 0F90      		pop __zero_reg__
 225 0082 0FBE      		reti
 227 0086 1F90      	.Lscope2:
 228 0088 1895      		.section	.text.GetTime,"ax",@progbits
 231               	.global	GetTime
 233               	GetTime:
 235               	.LM15:
 236               	.LFBB3:
 112:time.c        **** 
 113:time.c        **** /*******************************************************************
 114:time.c        ****  *  FUNCTION: GetTime
 115:time.c        ****  *  AUTHOR 		= 	TRAMPAS STERN
 116:time.c        ****  *  FILE 		=	time.c	
 117:time.c        ****  *  DATE		=   5/12/2005  10:16:50 AM
 118:time.c        ****  *
 119:time.c        ****  *  PARAMETERS: 	
 120:time.c        ****  *
 121:time.c        ****  *  DESCRIPTION: Gets the current time
 122:time.c        ****  *
 123:time.c        ****  *  RETURNS: 
 124:time.c        ****  *
 125:time.c        ****  *               Copyright 2004 (c) by Trampas Stern
 126:time.c        ****  *******************************************************************/
 127:time.c        **** UINT8 GetTime(TIME *ptr)
 128:time.c        **** {
 237               	/* prologue: function */
 238               	/* frame size = 0 */
 239               		movw r18,r24
 241 0002 DF93      	.LM16:
 242               		ldi r30,lo8(110)
 243               		ldi r31,hi8(110)
 244 0004 9C01      		ld r24,Z
 129:time.c        **** 	//first we need to disable the Timer ISR 	
 130:time.c        **** 	TIMSK0=TIMSK0 & ~(1<<OCIE0A); //Turn Timer0 compare A interrupt off
 245               	4,lo8(-3)
 246               		st Z,r24
 248 0008 F0E0      	.LM17:
 249 000a 8081      		lds r24,MilliSeconds
 250 000c 8D7F      		lds r25,(MilliSeconds)+1
 251 000e 8083      		movw r26,r18
 131:time.c        **** 
 132:time.c        **** 	//set the time variables
 133:time.c        **** 	ptr->milliSec=MilliSeconds;
 252               	26,4+1
 253               		st X,r25
 254 0010 8091 0000 		st -X,r24
 255 0014 9091 0000 		sbiw r26,4
 257 001a 1596      	.LM18:
 258 001c 9C93      		lds r24,Seconds
 259 001e 8E93      		lds r25,(Seconds)+1
 260 0020 1497      		lds r26,(Seconds)+2
 134:time.c        **** 	ptr->seconds=Seconds;
 261               	(Seconds)+3
 262               		movw r28,r18
 263 0022 8091 0000 		st Y,r24
 264 0026 9091 0000 		std Y+1,r25
 265 002a A091 0000 		std Y+2,r26
 266 002e B091 0000 		std Y+3,r27
 268 0034 8883      	.LM19:
 269 0036 9983      		ld r24,Z
 270 0038 AA83      		ori r24,lo8(2)
 271 003a BB83      		st Z,r24
 135:time.c        **** 
 136:time.c        **** 	//turn ISR back on
 137:time.c        **** 	TIMSK0=TIMSK0 | (1<<OCIE0A); //Turn Timer0 compare A interrupt ON
 272               	0,140,.LM20-.LFBB3
 273               	.LM20:
 274 003c 8081      		ldi r24,lo8(0)
 275 003e 8260      	/* epilogue start */
 276 0040 8083      		pop r29
 138:time.c        **** 
 139:time.c        **** 	return NO_ERROR;
 140:time.c        **** }
 277               	r28
 278               		ret
 280               	.Lscope3:
 281 0044 DF91      		.section	.text.GetElaspMs,"ax",@progbits
 284               	.global	GetElaspMs
 286               	GetElaspMs:
 288               	.LM21:
 289               	.LFBB4:
 290               		ldi r26,lo8(6)
 291               		ldi r27,hi8(6)
 141:time.c        **** 
 142:time.c        **** /*******************************************************************
 143:time.c        ****  *  FUNCTION: GetElaspMs
 144:time.c        ****  *  AUTHOR 		= 	TRAMPAS STERN
 145:time.c        ****  *  FILE 		=	time.c	
 146:time.c        ****  *  DATE		=   5/12/2005  10:19:48 AM
 147:time.c        ****  *
 148:time.c        ****  *  PARAMETERS: pointer to Time of start 	
 149:time.c        ****  *
 150:time.c        ****  *  DESCRIPTION: Returns number of milliseconds elasped
 151:time.c        ****  *
 152:time.c        ****  *  RETURNS: 
 153:time.c        ****  *
 154:time.c        ****  *               Copyright 2004 (c) by Trampas Stern
 155:time.c        ****  *******************************************************************/
 156:time.c        **** UINT32 GetElaspMs(TIME *pStart)
 157:time.c        **** {
 292               	(1f))
 293               		ldi r31,hi8(gs(1f))
 294               		jmp __prologue_saves__+((18 - 4) * 2)
 295 0000 A6E0      	1:
 296 0002 B0E0      	/* prologue: function */
 297 0004 E0E0      	/* frame size = 6 */
 298 0006 F0E0      		movw r16,r24
 300               	.LM22:
 301               		movw r24,r28
 302               		adiw r24,1
 303 000c 8C01      		call GetTime
 158:time.c        **** 	UINT32 temp;
 159:time.c        **** 	TIME t;
 160:time.c        **** 	GetTime(&t);
 304               	,162,.LM23-.LFBB4
 305               	.LM23:
 306 000e CE01      		ldd r22,Y+1
 307 0010 0196      		ldd r23,Y+2
 308 0012 0E94 0000 		ldd r24,Y+3
 161:time.c        **** 
 162:time.c        **** 	temp=(t.seconds-pStart->seconds)*1000;
 309               	ogue: function */
 310               	/* frame size = 6 */
 311 0016 6981      		movw r16,r24
 313 001a 8B81      	.LM22:
 314 001c 9C81      		movw r24,r28
 315 001e F801      		adiw r24,1
 316 0020 2081      		call GetTime
 318 0024 4281      	.LM23:
 319 0026 5381      		ldd r22,Y+1
 320 0028 621B      		ldd r23,Y+2
 321 002a 730B      		ldd r24,Y+3
 322 002c 840B      		ldd r25,Y+4
 323 002e 950B      		movw r30,r16
 324 0030 28EE      		ld r18,Z
 325 0032 33E0      		ldd r19,Z+1
 326 0034 40E0      		ldd r20,Z+2
 327 0036 50E0      		ldd r21,Z+3
 328 0038 0E94 0000 		sub r22,r18
 329 003c 9B01      		sbc r23,r19
 330 003e AC01      		sbc r24,r20
 163:time.c        ****   	temp=temp + t.milliSec;
 331               	lo8(1000)
 332               		ldi r19,hi8(1000)
 333 0040 F801      		ldi r20,hlo8(1000)
 334 0042 8481      		ldi r21,hhi8(1000)
 335 0044 9581      		call __mulsi3
 336 0046 A0E0      		movw r18,r22
 337 0048 B0E0      		movw r20,r24
 339 004c 390B      	.LM24:
 340 004e 4A0B      		movw r30,r16
 341 0050 5B0B      		ldd r24,Z+4
 342 0052 8D81      		ldd r25,Z+5
 343 0054 9E81      		ldi r26,lo8(0)
 344 0056 A0E0      		ldi r27,hi8(0)
 345 0058 B0E0      		sub r18,r24
 346 005a 280F      		sbc r19,r25
 347 005c 391F      		sbc r20,r26
 348 005e 4A1F      		sbc r21,r27
 349 0060 5B1F      		ldd r24,Y+5
 164:time.c        ****   	temp=temp-pStart->milliSec;
 165:time.c        **** 	return temp;
 166:time.c        **** }
 350               	24
 352 0062 B901      	.LM24:
 353 0064 CA01      		movw r30,r16
 354               		ldd r24,Z+4
 355 0066 2696      		ldd r25,Z+5
 356 0068 E4E0      		ldi r26,lo8(0)
 357 006a 0C94 0000 		ldi r27,hi8(0)
 358               		sub r18,r24
 359               		sbc r19,r25
 360               		sbc r20,r26
 361               		sbc r21,r27
 362               		ldd r24,Y+5
 363               		ldd r25,Y+6
 364               		ldi r26,lo8(0)
 365               		ldi r27,hi8(0)
 366               		add r18,r24
 367               		adc r19,r25
 368               		adc r20,r26
 167:time.c        **** 
 168:time.c        **** /*******************************************************************
 169:time.c        ****  *  FUNCTION: GetElaspSec
 170:time.c        ****  *  AUTHOR 		= 	TRAMPAS STERN
 171:time.c        ****  *  FILE 		=	time.c	
 172:time.c        ****  *  DATE		=   5/12/2005  10:29:25 AM
 173:time.c        ****  *
 174:time.c        ****  *  PARAMETERS:   pointer to Time of start	
 175:time.c        ****  *
 176:time.c        ****  *  DESCRIPTION: returns elasped seconds
 177:time.c        ****  *
 178:time.c        ****  *  RETURNS: 
 179:time.c        ****  *
 180:time.c        ****  *               Copyright 2004 (c) by Trampas Stern
 181:time.c        ****  *******************************************************************/
 182:time.c        **** UINT32 GetElaspSec(TIME *pStart)
 183:time.c        **** {
 369               	o8(0)
 370               		ldi r27,hi8(0)
 371               		sub r18,r24
 372 0000 A6E0      		sbc r19,r25
 373 0002 B0E0      		sbc r20,r26
 374 0004 E0E0      		sbc r21,r27
 375 0006 F0E0      		ldd r24,Y+5
 376 0008 0C94 0000 		ldd r25,Y+6
 377               		ldi r26,lo8(0)
 378               		ldi r27,hi8(0)
 379               		add r18,r24
 380 000c 8C01      		adc r19,r25
 184:time.c        **** 	UINT32 temp;
 185:time.c        **** 	TIME t;
 186:time.c        **** 	GetTime(&t);
 381               	Z+5
 382               		ldi r26,lo8(0)
 383 000e CE01      		ldi r27,hi8(0)
 384 0010 0196      		sub r18,r24
 385 0012 0E94 0000 		sbc r19,r25
 386 0016 2981      		sbc r20,r26
 387 0018 3A81      		sbc r21,r27
 388 001a 4B81      		ldd r24,Y+5
 389 001c 5C81      		ldd r25,Y+6
 390 001e F801      		ldi r26,lo8(0)
 391 0020 8081      		ldi r27,hi8(0)
 392 0022 9181      		add r18,r24
 393 0024 A281      		adc r19,r25
 394 0026 B381      		adc r20,r26
 395 0028 281B      		adc r21,r27
 397 002c 4A0B      	.LM25:
 398 002e 5B0B      		movw r22,r18
 187:time.c        **** 
 188:time.c        **** 	temp=(t.seconds-pStart->seconds);
 189:time.c        ****  	return temp;
 190:time.c        **** }
 399               	1,r27
 400               		ldd r24,Y+5
 401 0030 B901      		ldd r25,Y+6
 402 0032 CA01      		ldi r26,lo8(0)
 403               		ldi r27,hi8(0)
 404 0034 2696      		add r18,r24
 405 0036 E4E0      		adc r19,r25
 406 0038 0C94 0000 		adc r20,r26
 407               		adc r21,r27
 409               	.LM25:
 410               		movw r22,r18
 411               		movw r24,r20
 412               	/* epilogue start */
 413               		adiw r28,6
 414               		ldi r30, lo8(4)
 415               		jmp __epilogue_restores__ + ((18 - 4) * 2)
 191:time.c        **** 
 192:time.c        **** UINT32 getSeconds(void)
 193:time.c        **** {
 417               	.LM25:
 418               		movw r22,r18
 419               		movw r24,r20
 420               	/* epilogue start */
 421               		adiw r28,6
 194:time.c        **** 	UINT32 temp;
 195:time.c        **** 
 196:time.c        **** 	TIMSK0=TIMSK0 & ~(1<<OCIE0A); //Turn Timer0 compare A interrupt off
 422               	di r27,hi8(0)
 423               		add r18,r24
 424 0000 EEE6      		adc r19,r25
 425 0002 F0E0      		adc r20,r26
 426 0004 8081      		adc r21,r27
 428 0008 8083      	.LM25:
 197:time.c        **** 
 198:time.c        **** 	//set the time variables
 199:time.c        **** 	temp=Seconds;
 429               	r20,r26
 430               		sbc r21,r27
 431 000a 2091 0000 		ldd r24,Y+5
 432 000e 3091 0000 		ldd r25,Y+6
 433 0012 4091 0000 		ldi r26,lo8(0)
 434 0016 5091 0000 		ldi r27,hi8(0)
 200:time.c        **** 
 201:time.c        **** 	//turn ISR back on
 202:time.c        **** 	TIMSK0=TIMSK0 | (1<<OCIE0A); //Turn Timer0 compare A interrupt ON
 435               	0,r16
 436               		ldd r24,Z+4
 437 001a 8081      		ldd r25,Z+5
 438 001c 8260      		ldi r26,lo8(0)
 439 001e 8083      		ldi r27,hi8(0)
 203:time.c        **** 
 204:time.c        **** 	return temp;
 205:time.c        **** }
 440               	lo8(1000)
 441               		ldi r21,hhi8(1000)
 442 0020 B901      		call __mulsi3
 443 0022 CA01      		movw r18,r22
 444               		movw r20,r24
 446               	.LM24:
 447               		movw r30,r16
 448               		ldd r24,Z+4
 449               		ldd r25,Z+5
 450               		ldi r26,lo8(0)
 451               		ldi r27,hi8(0)
 452               		sub r18,r24
 453               		sbc r19,r25
 454               		sbc r20,r26
 455               		sbc r21,r27
 456               		ldd r24,Y+5
 206:time.c        **** 
 207:time.c        **** 
 208:time.c        **** 
 209:time.c        **** UINT16 connect_timer(UBYTE reset)
 210:time.c        **** {
 457               	24
 459               	.LM24:
 460               		movw r30,r16
 461               		ldd r24,Z+4
 211:time.c        **** 	UINT16 temp;
 212:time.c        **** 	TIMSK0=TIMSK0 & ~(1<<OCIE0A); //Turn Timer0 compare A interrupt off
 462               		ldi r18,lo8(1000)
 463               		ldi r19,hi8(1000)
 464 0000 9091 6E00 		ldi r20,hlo8(1000)
 465 0004 9D7F      		ldi r21,hhi8(1000)
 466 0006 9093 6E00 		call __mulsi3
 213:time.c        **** 	if (reset)
 467               	 r18,Z
 468               		ldd r19,Z+1
 469 000a 8823      		ldd r20,Z+2
 470 000c 01F0      		ldd r21,Z+3
 214:time.c        **** 	{
 215:time.c        **** 		cnt_timer=0;	
 471               	
 472               	.LM22:
 473 000e 1092 0000 		movw r24,r28
 474 0012 1092 0000 		adiw r24,1
 475               		call GetTime
 216:time.c        **** 	}
 217:time.c        **** 	temp=cnt_timer;
 476               	abn	68,0,162,.LM23-.LFBB4
 477               	.LM23:
 478 0016 2091 0000 		ldd r22,Y+1
 479 001a 3091 0000 		ldd r23,Y+2
 218:time.c        **** 	TIMSK0=TIMSK0 | (1<<OCIE0A); //Turn Timer0 compare A interrupt ON
 480               	 2)
 481               	1:
 482 001e 8091 6E00 	/* prologue: function */
 483 0022 8260      	/* frame size = 6 */
 484 0024 8093 6E00 		movw r16,r24
 219:time.c        **** 	return temp;
 220:time.c        **** }
 485               	bn	68,0,160,.LM22-.LFBB4
 486               	.LM22:
 487 0028 C901      		movw r24,r28
 488               		adiw r24,1
 489 002a 0895      		call GetTime
 491               	.LM23:
 492               		ldd r22,Y+1
 493               		ldd r23,Y+2
 494               		ldd r24,Y+3
 495               		ldd r25,Y+4
 496               		movw r30,r16
 497               		ld r18,Z
 498               		ldd r19,Z+1
 499               		ldd r20,Z+2
 500 0000 0000 0000 		ldd r21,Z+3
 501               		sub r22,r18
 502               		sbc r23,r19
 503               		sbc r24,r20
 504               		sbc r25,r21
 505               		ldi r18,lo8(1000)
 506 0000 0000      		ldi r19,hi8(1000)
 507               		ldi r20,hlo8(1000)
 508               		ldi r21,hhi8(1000)
 509               		call __mulsi3
 510               		movw r18,r22
 511               		movw r20,r24
 513               	.LM24:
 514               		movw r30,r16
 515               		ldd r24,Z+4
 516               		ldd r25,Z+5
 517               		ldi r26,lo8(0)
 518               		ldi r27,hi8(0)
 519               		sub r18,r24
DEFINED SYMBOLS
                            *ABS*:00000000 time.c
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:2      *ABS*:0000003f __SREG__
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:3      *ABS*:0000003e __SP_H__
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:4      *ABS*:0000003d __SP_L__
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:5      *ABS*:00000034 __CCP__
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:119    .text.TimeInit:00000000 TimeInit
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:158    .text.__vector_16:00000000 __vector_16
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:505    .bss.MilliSeconds:00000000 MilliSeconds
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:499    .bss.Seconds:00000000 Seconds
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:511    .bss.cnt_timer:00000000 cnt_timer
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:236    .text.GetTime:00000000 GetTime
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:291    .text.GetElaspMs:00000000 GetElaspMs
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:368    .text.GetElaspSec:00000000 GetElaspSec
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:416    .text.getSeconds:00000000 getSeconds
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp/cc098rVr.s:456    .text.connect_timer:00000000 connect_timer

UNDEFINED SYMBOLS
__prologue_saves__
__mulsi3
__epilogue_restores__
__do_clear_bss
